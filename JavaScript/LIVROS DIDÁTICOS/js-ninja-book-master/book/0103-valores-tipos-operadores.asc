== Valores, Tipos e Operadores

Basicamente o computador é uma máquina de calcular super potente.

Nos primórdios ele foi projetado exclusivamente para realizar cálculos matemáticos complexos. E atualmente além de ser utilizado para jogar e assistir "vídeos educativos", nós programadores utilizamos para criar algoritmos que sejam capazes de resolver problemas reais.

Internamente os computadores modernos implementam todos os números na base binária. Isso significa que o decimal `3` é representado pelo binário `011`.

Isso acontece porque o computador trabalha com Bits (números entre `0` ou `1`).

Para nós, que não somos ninjas ainda, trabalhar diretamente com binário é muito mais difícil. E por isso (e outras razões) que as linguagens implementam a base numérica decimal.

=== Números

É um dos tipos de dados mais básicos da linguagem (por razões lógicas).

Os números podem ser Inteiros (_Integer_) ou Fracionados (_Float_). A única diferença importante é que para nós a vírgula representa a divisão de uma fração e para o computador isso é representado pelo ponto.

Portanto, ao representar 3,1 você deve escrever `3.1`. Basta trocar , por .

Nos números muito pequenos ou muito grandes como `10000000000000000000000000` é utilizado a notação científica adicionando um `e` seguido do expoente.

Para o caso acima a representação ficaria como `1e+25`.

No geral o JavaScript não se sai muito bem em computação científica, não foi projetado pra isso. A sua proposta é muito mais voltada ao programador.

=== Operações aritméticas

Nenhuma máquina de calcular seria completa sem a `+`, `-`, `*` e `/`. Que representam soma, subtração, multiplicação e divisão respectivamente.

Estas são as 4 operações básicas e são implementadas diretamente na linguagem.

E como a tia Estela nos ensinou, uma operação de soma, por exemplo, deve ser feita diretamente na linguagem com um simples sinal de "mais": `3 + 3`.

Outro detalhe importante são os parênteses. Eles impõem uma precedência forçada, já que estão no topo da cadeia alimentar:

1. `()`
2. `*` e `/`
3. `+` e `-`

Isso garante que o resultado de `(21 + 2) * 3` seja `69` ao invés de `17`.

=== Números especiais

Na linguagem JavaScript alguns números precisam ser representados de uma forma especial, já que não é muito prático e até possível mostrar na tela o infinito positivo ou o negativo, por exemplo.

Estes dois números especiais são representados para nós humanos na linguagem como `Infinity` e `-Infinity`.

E servem basicamente como resultados para coisas como `1 + Infinity` ou `1 / 0`.

Já para os casos onde o valor não é reconhecido como um número válido nós temos o `NaN` (_Not a Number_ em inglês).

Que significa que o resultado ou valor não pode ser utilizado pra nada, sendo apenas informativo, como `0 / 0`, por exemplo.

=== Strings

O próximo tipo de dado é a _string_. As Strings são utilizadas para representar um texto e são escritas sempre entre áspas duplas `"` ou simples `'`.

[source,javascript]
----
"O focinho do babuíno é azul."
'Desculpe! Já são 3 da madrugada e estou meio confuso.'
----

Ambas as formas de representar uma string estão corretas (com áspas simples e duplas) contanto que as áspas  sejam abertas e fechadas da mesma forma.

Qualquer coisa pode ser colocada entre áspas, até os caracteres invisíveis. Explico.

Alguns caracteres como o Enter e Tab, por exemplo, podem ser representados na String adicionando a `\` na frente. Sendo assim o Enter (quebra de linha) ficaria como `\n` e o Tab como `\t`. Veja um exemplo:


[source,javascript]
----
"O focinho do babuíno é azul.\nE o pelo é cinza!"
----

Como resultado:

[source]
----
O focinho do babuíno é azul.
E o pelo é cinza!
----

As Strings não podem ser multiplicadas, divididas e subtraídas. Contudo podemos realizar "soma" com o operador `+`.

Com texto, a operação de soma concatena os valores, juntando `'A' + 'B'` para formar `AB`.

=== Booleanos

O valor booleano representa o dado mais puro de um computador, já que está associado diretamente a sua base numérica de trabalho.

Um booleano pode ser representado por `1` ou `true` para verdadeiro e `0` ou `false` para falso.

São úteis e mais utilizados em situações onde um dado pode assumir um estado/valor apenas.
